name: Publish to PyPI

# This workflow supports two publishing modes:
# 1. Manual TestPyPI: Use workflow_dispatch with a version (e.g., 1.0.1-rc1)
#    - Updates version using ./scripts/version.sh
#    - Publishes to TestPyPI for testing
#    - Tests installation with pip, pipx, and uv
# 2. Automatic PyPI: Triggered by GitHub releases
#    - Verifies version consistency across files
#    - Publishes to production PyPI
#    - Tests installation with all package managers

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish to TestPyPI (e.g., 1.0.1-rc1)'
        required: true
        default: '1.0.1-rc1'

# Security: No default permissions - each job specifies its own
permissions: {}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Required to checkout repository contents
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6.5.0
      with:
        version: "0.8.12"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run tests
      run: uv run pytest -v
    
    - name: Run linting
      run: |
        uv run flake8 keychecker/ tests/
        uv run black --check keychecker/ tests/
    
    - name: Run type checking
      run: uv run mypy keychecker/

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write  # Required for uploading artifacts
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6.5.0
      with:
        version: "0.8.12"
    
    - name: Set up Python
      run: uv python install 3.9  # Use minimum supported version for build
    
    - name: Install build dependencies
      run: uv tool install twine
    
    - name: Build package
      run: uv build
    
    - name: Check package
      run: uv tool run twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
      with:
        name: dist
        path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: read  # Required to checkout repository contents
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6.5.0
      with:
        version: "0.8.12"
    
    - name: Set up Python
      run: uv python install 3.9  # Use minimum supported version for build
    
    - name: Install build dependencies
      run: uv tool install twine
    
    - name: Build package
      run: uv build
    
    - name: Install pipx for testing
      run: uv tool install pipx
    
    - name: Update version for TestPyPI
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "🔄 Updating version to ${{ github.event.inputs.version }} for TestPyPI..."
        chmod +x ./scripts/version.sh
        ./scripts/version.sh ${{ github.event.inputs.version }}
    
    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}
      run: uv tool run twine upload --repository testpypi dist/*
    
    - name: Test installation methods from TestPyPI
      run: |
        echo "🧪 Testing installation with multiple package managers..."
        
        # Test 1: pip in virtual environment (most common method)
        echo "📦 Testing with pip in venv..."
        python -m venv test-pip-env
        source test-pip-env/bin/activate
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ keychecker
        keychecker --version
        keychecker --help > /dev/null
        deactivate
        rm -rf test-pip-env
        echo "✅ pip installation test passed"
        
        # Test 2: pipx (isolated global installation)
        echo "📦 Testing with pipx..."
        uv tool run pipx install --index-url https://test.pypi.org/simple/ --pip-args="--extra-index-url https://pypi.org/simple/" keychecker
        keychecker --version
        keychecker --help > /dev/null
        uv tool run pipx uninstall keychecker
        echo "✅ pipx installation test passed"
        
        # Test 3: uv (modern fast installer)
        echo "📦 Testing with uv..."
        uv venv test-uv-env
        uv pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ keychecker
        uv run keychecker --version
        uv run keychecker --help > /dev/null
        rm -rf test-uv-env
        echo "✅ uv installation test passed"
        
        echo "🎉 All installation methods tested successfully!"

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: read  # Required to checkout repository contents
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683   # v4.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@d9e0f98d3fc6adb07d1e3d37f3043649ddad06a1 # v6.5.0
      with:
        version: "0.8.12"
    
    - name: Set up Python
      run: uv python install 3.9  # Use minimum supported version for build
    
    - name: Install build dependencies
      run: uv tool install twine pipx
    
    - name: Build package
      run: uv build
    
    - name: Verify version consistency
      if: github.event_name == 'release'
      run: |
        echo "🔍 Verifying version consistency for release..."
        
        # Extract release version from GitHub release tag
        RELEASE_VERSION="${{ github.event.release.tag_name }}"
        # Remove 'v' prefix if present (e.g., v1.0.5 -> 1.0.5)
        RELEASE_VERSION=${RELEASE_VERSION#v}
        
        echo "📋 Release version: $RELEASE_VERSION"
        
        # Get version from pyproject.toml
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "📋 pyproject.toml version: $PYPROJECT_VERSION"
        
        # Get version from __init__.py
        INIT_VERSION=$(uv run python -c "import keychecker; print(keychecker.__version__)")
        echo "📋 __init__.py version: $INIT_VERSION"
        
        # Check if all versions match
        if [ "$RELEASE_VERSION" != "$PYPROJECT_VERSION" ] || [ "$RELEASE_VERSION" != "$INIT_VERSION" ]; then
            echo "❌ Error: Version mismatch detected!"
            echo "   Release tag: $RELEASE_VERSION"
            echo "   pyproject.toml: $PYPROJECT_VERSION"
            echo "   __init__.py: $INIT_VERSION"
            echo ""
            echo "💡 Please ensure all version strings match the release tag."
            echo "   You can use: ./scripts/version.sh $RELEASE_VERSION"
            exit 1
        fi
        
        echo "✅ All versions match: $RELEASE_VERSION"
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: uv tool run twine upload dist/*
    
    - name: Verify publication with multiple installation methods
      run: |
        echo "🧪 Verifying PyPI publication with multiple package managers..."
        
        # Test 1: pip in virtual environment (most common method)
        echo "📦 Testing with pip in venv..."
        python -m venv verify-pip-env
        source verify-pip-env/bin/activate
        pip install keychecker
        keychecker --version
        keychecker --help > /dev/null
        deactivate
        rm -rf verify-pip-env
        echo "✅ pip installation verification passed"
        
        # Test 2: pipx (isolated global installation)
        echo "📦 Testing with pipx..."
        uv tool run pipx install keychecker
        keychecker --version
        keychecker --help > /dev/null
        uv tool run pipx uninstall keychecker
        echo "✅ pipx installation verification passed"
        
        # Test 3: uv (modern fast installer)
        echo "📦 Testing with uv..."
        uv venv verify-uv-env
        uv pip install keychecker
        uv run keychecker --version
        uv run keychecker --help > /dev/null
        rm -rf verify-uv-env
        echo "✅ uv installation verification passed"
        
        echo "🎉 All installation methods verified successfully!"
